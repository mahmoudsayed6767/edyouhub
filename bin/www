#!/usr/bin/env node

  var app = require('../app');
  var debug = require('debug')('project:server');
  var fs = require('fs');
  const https = require('https');

  var port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);
  // Certificate
  const privateKey = fs.readFileSync('/root/edyouhub-api/ssl/privkey.pem', 'utf8');
  const certificate = fs.readFileSync('/root/edyouhub-api/ssl/fullchain.pem', 'utf8');
  const ca = fs.readFileSync('/root/edyouhub-api/ssl/fullchain.pem', 'utf8');
 
  const credentials = {
          key: privateKey,
          cert: certificate,
          ca: ca
  };
  /**
  * Create HTTPs server. 
  */
  var server = https.createServer(credentials, app);
  /**
  * Listen on provided port, on all network interfaces.
  */

  //socket
  // server-side
  var Server = require('socket.io');
  var io = Server(server);
  var socketService = require('../socketService/socketIoService');
  io.on( 'connection', function( socket ){
    
    console.log( 'User ' + socket.id + ' connected' );
  });
  socketService.startChat(io);
  socketService.startNotification(io);

  //////////////////////////// //////////////////////////// //////////////////////////// //////////////////////////// //////////////////////////// 
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
  * Normalize a port into a number, string, or false.
  */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
  * Event listener for HTTPs server "error" event.
  */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
  * Event listener for HTTPs server "listening" event.
  */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }


  //}
